#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys

import argparse
import subprocess

from shutil import which


class RoseCliHandler:
    def __init__(self):
        self.__init_arg_parser()
        self.__init_compose_command()

        self.parsed_args, self.parsed_unknown = self.arg_parser.parse_known_args()

        if hasattr(self.parsed_args, 'handler'):
            self.parsed_args.handler(self.parsed_args)
        else:
            self.arg_parser.print_help()

    def help(self, args):
        self.arg_parser.print_help()

    def version(self, args):
        # TODO
        print('rose version 0.0.0')

    def ps(self, args):
        subprocess.run(
            self.compose_command
            + ['ps']
        )

    def ls(self, args):
        subprocess.run(
            self.compose_command
            + ['ls']
        )

    def up(self, args):
        subprocess.run(
            self.compose_command
            + ['up']
        )

    def down(self, args):
        subprocess.run(
            self.compose_command
            + ['down']
        )
    
    def build(self, args):
        subprocess.run(
            self.compose_command
            + ['build']
        )
    
    def __init_arg_parser(self):
        self.arg_parser = argparse.ArgumentParser(
            prog='rose',
            description='ROS Enviroment operation tools'
        )
        self.__init_sub_command()

    def __init_sub_command(self):
        self.sub_arg_parsers = self.arg_parser.add_subparsers(
            dest='subcommand',
            help='ROS Enviroment sub-commands'
        )

        common_parser_args = {
        }
        common_sub_cmd_args = {
            'nargs': '+',
            'action': 'append',
            'default': []
        }

        # TODO
        self.parsers = {}

        self.parsers['help'] = self.sub_arg_parsers.add_parser(
            'help',
            **common_parser_args
        )
        self.parsers['help'].set_defaults(
            handler=self.help
        )
        self.parsers['version'] = self.sub_arg_parsers.add_parser(
            'version',
            **common_parser_args
        )
        self.parsers['version'].set_defaults(
            handler=self.version
        )
        self.parsers['ps'] = self.sub_arg_parsers.add_parser(
            'ps',
            **common_parser_args
        )
        self.parsers['ps'].set_defaults(
            handler=self.ps
        )
        self.parsers['ls'] = self.sub_arg_parsers.add_parser(
            'ls',
            **common_parser_args
        )
        self.parsers['ls'].set_defaults(
            handler=self.ls
        )
        self.parsers['up'] = self.sub_arg_parsers.add_parser(
            'up',
            **common_parser_args
        )
        self.parsers['up'].set_defaults(
            handler=self.up
        )
        self.parsers['down'] = self.sub_arg_parsers.add_parser(
            'down',
            **common_parser_args
        )
        self.parsers['down'].set_defaults(
            handler=self.down
        )
        self.parsers['build'] = self.sub_arg_parsers.add_parser(
            'build',
            **common_parser_args
        )
        self.parsers['build'].set_defaults(
            handler=self.build
        )

        # TODO
        # self.parsers['version'].add_argument(
        #     '--args',
        #     nargs='*',
        #     action='append',
        #     default=[]
        # )

    def __set_this_directory_path(self):
        self.this_script_dir = os.path.dirname(os.path.realpath(__file__))

    def __init_compose_command(self):
        if which('docker') is None:
            raise OSError('Not found docker cil')

        self.__set_compose_command()

    def __set_compose_command(self):
        self.__set_this_directory_path()
        self.rose_package_dir = os.path.join(
            self.this_script_dir,
            '..'
        )

        self.compose_command = []
        self.compose_command.append('docker')
        self.compose_command.append('compose')

        self.compose_command += self.__gen_compose_file_path()

    def __gen_compose_file_path(self):
        compose_file_override = []

        compose_file_override.append('-f')
        compose_file_override.append(
            os.path.join(
                self.rose_package_dir,
                'docker-compose.yaml'
            )
        )

        if not which('nvidia-smi') is None:
            compose_file_override.append('-f')
            compose_file_override.append(
                os.path.join(
                    self.rose_package_dir,
                    'override',
                    'docker-compose.nvidia.yaml'
                )
            )

        return compose_file_override


if __name__ == '__main__':
    rose_cli_handler = RoseCliHandler()
